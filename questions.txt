1. Эффективная конкатенация строк: В Go для эффективной конкатенации строк часто используют пакет strings и функцию Join. Это более эффективно, чем просто использование оператора + для строк, особенно при большом количестве конкатенаций.

2. Интерфейсы в Go: Интерфейсы в Go представляют собой набор методов. Если тип реализует все методы интерфейса, то он автоматически считается реализующим этот интерфейс. Интерфейсы используются для достижения полиморфизма и абстракции.

3. RWMutex vs Mutex:

- Mutex (или просто sync.Mutex) является обычным мьютексом, который блокирует доступ для чтения и записи.
- RWMutex (или sync.RWMutex) предоставляет блокировку для чтения, которую могут получить множество горутин, но блокирует доступ для записи, если хотя бы одна горутина уже владеет блокировкой на чтение или запись.

4. Буферизированные и не буферизированные каналы:

- Буферизированные каналы (созданные с использованием make(chan T, capacity)) могут содержать до capacity элементов. Отправка в буферизованный канал не блокируется, пока буфер не заполнен.
- Небуферизированные каналы (созданные без указания емкости make(chan T)) требуют, чтобы отправка и прием происходили одновременно (иначе произойдет блокировка).

5. Размер структуры struct{}{}: Размер структуры struct{}{} в Go равен 0, так как она не содержит полей.

6. Перегрузка методов и операторов в Go: Go не поддерживает перегрузку методов и операторов. Методы и операторы должны иметь уникальные имена.

7.Последовательность вывода элементов map[int]int:

В Go порядок элементов в map не гарантирован. Вывод элементов map может быть в произвольном порядке.

8. Разница между make и new в Go:

'make' используется для создания срезов, карт и каналов.
'new' используется для выделения памяти для нового экземпляра типа и возвращает указатель на этот экземпляр.

9. Способы задать переменную типа slice или map:

- Для slice: var mySlice []int или mySlice := make([]int, 0).
- Для map: var myMap map[string]int или myMap := make(map[string]int).

10. Результат программы с функцией update:

Программа выведет 1 и 1, потому что p - это указатель, и update изменяет значение переменной, на которую указывает p, но не изменяет сам указатель.

11. Результат программы с горутинами и WaitGroup:

Программа выведет значения 0, 1, 2, 3, 4 и exit. Однако, так как горутины могут выполняться параллельно, порядок вывода чисел может меняться.

12. Результат программы с блоком if:

Программа выведет 0, так как переменная n внутри блока if имеет область видимости только внутри этого блока.

13. Результат программы с функцией someAction:

Программа выведет [100 2 3 4 5]. Функция someAction изменяет оригинальный срез, добавляя 100 в начало, но копия среза в main остается неизменной.

14. Результат программы с анонимной функцией:

Программа выведет [b b] [a a]. Анонимная функция в блоке {} изменяет копию среза slice, но не влияет на оригинальный срез вне блока.